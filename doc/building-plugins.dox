/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013 Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page building-plugins Downloading and building plugins
@brief Guide how to download and build plugins for %Magnum engine.

Plugins provide additional capability for %Magnum engine in terms of importing
and exporting various media file formats. They are not needed for essential
usage, but you will need them sooner or later when you would want to use image
as a texture or render text on the screen.

The source is available on GitHub: https://github.com/mosra/magnum-plugins.
Building plugins is very similar to building %Magnum itself. See @ref building
for additonal information about building and running tests, crosscompiling and
platform-specific issues.

Similarly to %Magnum, the plugins are build as shared by default. If you are
developing for platform which doesn't support dynamic library loading or if you
just want to link them statically, enable `BUILD_STATIC` to build the plugins
as static. Dynamic plugins are loaded by the manager on request at runtime,
potentially saving memory when the plugin is not needed, static plugins must be
linked in at compile time.

The library by default does not install `FindMagnumPlugins.cmake`, as you
should bundle the module with your code instead of depending on it being in
system location. You can install it by enabling `WITH_FIND_MODULE`.

By default no plugins are built and you need to select them manually:

-   `WITH_COLLADAIMPORTER` -- @ref Trade::ColladaImporter "ColladaImporter"
    plugin. Enables also building of @ref Trade::TgaImporter "TgaImporter"
    plugin.
-   `WITH_FREETYPEFONT` -- @ref Text::FreeTypeFont "FreeTypeFont" plugin.
-   `WITH_HARFBUZZFONT` -- @ref Text::HarfBuzzFont "HarfBuzzFont" plugin.
    Enables also building of @ref Text::FreeTypeFont "FreeTypeFont" plugin.
-   `WITH_JPEGIMPORTER` -- @ref Trade::JpegImporter "JpegImporter" plugin.
-   `WITH_PNGIMPORTER` -- @ref Trade::PngImporter "PngImporter" plugin.

Note that each plugin class contains more detailed information about
dependencies, availability on particular platform and also guide how to enable
given library in build and use it with CMake.

@section building-plugins-arch Building ArchLinux packages

In `package/archlinux` directory is currently one package for Git development
build. The package is also in AUR under the same name.

There are also a few development PKGBUILDs in `package/archlinux`, which allow
you to build and install the package directly from source tree without
downloading anything. The native PKGBUILDs also contain `check()` function
which will run all unit tests before packaging. You need to build them from
project root:

    makepkg -p package/archlinux/<file>

@section building-ci-jenkins Jenkins Continuous Integration

In `package/ci/` there are `jenkins.xml` and `jenkins-gltests.xml` files
containing job configuration, one for build and non-GL tests and the other for
GL tests only. Setup your Jenkins server, enable the **Git** and
**Text-finder** plugin and download the CLI application from here:

    http://your-jenkins-server/cli

Then add new jobs or update existing ones (replace `<command>` with `create-job`
or `update-job`).

    java -jar jenkins-cli.jar -s http://your-jenkins-server <command> MagnumPlugins < jenkins.xml
    java -jar jenkins-cli.jar -s http://your-jenkins-server <command> MagnumPlugins-GLTests < jenkins-gltests.xml

Build is done using **Ninja** build system and everything possible is enabled,
thus you need also **FreeType**, **HarfBuzz**, **libJPEG**, **libPNG** and
**Qt4** libraries. It expects that **GCC** >=4.8.2, 4.7, 4.6 and **Clang** are
installed and there are **OpenGL**, **OpenGL ES 2.0** and **OpenGL ES 3.0**
librares as it tries to compile the library with every combination of them. You
can add/remove the axes in `axes/hudson.matrix.TextAxis` or via the web
interface later.

MagnumPlugins-GLTests depend on active X11 session, thus they should be run from
Jenkins instance running on graphical user session.

There is also MinGW32 and Emscripten configuration, add or update them with the
commands below. See @ref building-crosscompiling for more information about
setting up the crosscompilers and `toolchains/` submodule. For Emscripten you
need also **Node.js** installed to run the tests.

    java -jar jenkins-cli.jar -s http://your-jenkins-server <command> MagnumPlugins-MinGW32 < jenkins-mingw32.xml
    java -jar jenkins-cli.jar -s http://your-jenkins-server <command> MagnumPlugins-Emscripten < jenkins-emscripten.xml
*/
}
